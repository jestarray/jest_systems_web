{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ChoiceProblem.svelte",
    "ProblemSet.svelte",
    "SelectProblem.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import ProblemSet from \"./ProblemSet.svelte\";\r\n;\r\nimport Home from \"./routes/Home.svelte\";\r\nimport Blog from \"./routes/Blog.svelte\";\r\nimport SingleBlog from \"./routes/SingleBlog.svelte\";\r\nimport router from \"page\";\r\nimport { convert_to_title, TOC, convert_to_hash } from \"./generate\";\r\nimport { Result } from \"./CST\";\r\nimport Discussions from \"./Discussions.svelte\";\r\nlet problem_index = 0;\r\nlet enable_next = false;\r\nlet page;\r\nlet params;\r\nlet section;\r\nlet merged = TOC;\r\nrouter(\"/\", (ctx, next) => {\r\n    let hash = ctx.hash;\r\n    if (hash.includes(\"discuss\")) {\r\n        page = Discussions;\r\n        let slash_index = hash.indexOf(\"/\") + 1;\r\n        let path = hash.slice(slash_index, hash.length);\r\n        console.log(path);\r\n        let title = convert_to_title(path);\r\n        params = { title: title };\r\n    }\r\n    else {\r\n        //problem pages\r\n        let saved = JSON.parse(localStorage.getItem(\"save\"));\r\n        if (saved) {\r\n            merged = TOC.map((curr, index) => {\r\n                return Object.assign(curr, saved[index]);\r\n            });\r\n        }\r\n        section = merged.find((item) => {\r\n            return convert_to_hash(item.title) === hash;\r\n        });\r\n        if (section !== undefined) {\r\n            page = ProblemSet;\r\n            params = section;\r\n            console.log(params.data);\r\n            params.data =\r\n                params.data.length > 0\r\n                    ? params.data\r\n                    : Array.from(new Array(section.num_of_problems), () => params.gen());\r\n        }\r\n        else {\r\n            page = Home;\r\n        }\r\n    }\r\n});\r\nrouter(\"/discuss\", () => {\r\n    page = Discussions;\r\n});\r\nrouter.start();\r\n</script>\n\n<nav><a href=\"/\">Home</a></nav>\n<main class=\"container\">\n  <svelte:component\n    this={page}\n    {params}\n    title={params ? params.title : ''}\n    data={params}\n    on:save={() => {\n      localStorage.setItem('save', JSON.stringify(merged));\n      console.log('saving');\n      let saved = localStorage.getItem('save');\n    }}\n  />\n</main>\n\n<!-- \n\n      progress={params ? params.progress : ''}\n    reset_problems={params ? params.gen : null}\n    problem_index={params ? params.problem_index : 0}\n -->\n\n<style>\n  main {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n",
    "<script>\n  export let data;\n  import { createEventDispatcher } from \"svelte\";\n  const dispatch = createEventDispatcher();\n  let selected_radio_index;\n  let is_valid_input = false;\n\n  $: dispatch(\"update-check\", function check_answer() {\n    let selected = data.answer[selected_radio_index];\n    let is_correct = selected.correct;\n    return is_correct;\n  });\n</script>\n\n<style>\n  label {\n    border: 1px solid grey;\n    border-radius: 25px;\n    margin: 2px;\n  }\n</style>\n\n<div>\n  <div>\n    {@html data.question}\n  </div>\n\n  {#each data.answer as option, index}\n    <label>\n      <!-- selected_radio_index = index -->\n      <input\n        type=\"radio\"\n        bind:group={selected_radio_index}\n        value={index}\n        on:click={function () {\n          is_valid_input = true;\n          dispatch('valid-input', is_valid_input);\n        }} />\n      {option.text}\n    </label>\n  {/each}\n</div>\n",
    "<script lang=\"ts\">import InputProblem from \"./InputProblem.svelte\";\r\nimport ChoiceProblem from \"./ChoiceProblem.svelte\";\r\nimport SelectProblem from \"./SelectProblem.svelte\";\r\nimport { correct_answer_sound, wrong_answer_sound } from \"./audio\";\r\nimport { Result } from \"./CST\";\r\nimport { createEventDispatcher } from \"svelte\";\r\n;\r\nexport let data;\r\nlet generate = data.gen;\r\n//let progress = data.progress;\r\n/*   export let generate: null | Function; //function\r\nexport let progress: {\r\n  result: Result;\r\n  tries: number;\r\n  time: number;\r\n  hints: number;\r\n}[];\r\nexport let problem_index; */\r\n/* = [\r\n  {\r\n    type: \"select\",\r\n    question: \"Which of the following statements are true about computers\",\r\n    answer: [\r\n      { text: \"computers use 0 and 1s\", correct: true },\r\n      { text: \"computers were invented in the stone era\", correct: false },\r\n      { text: \"computers use electricity\", correct: true },\r\n    ],\r\n    hints: [], //list of strings? or a string templates\r\n  },\r\n  {\r\n    type: \"input\",\r\n    question: \"<h1>What is 2 + 2?</h1>\",\r\n    answer: 4,\r\n    input_answer_hint: \"Answer e.g 2 or instrunctions to round to the nearest int etc\"\r\n    hints: [], //list of strings? or a string templates\r\n  },\r\n\r\n  {\r\n    type: \"choice\",\r\n    question: \"<h1>Who is the creator of linux?<h1>\", //what if the question contains an image?\r\n    answer: [\r\n      { text: \"bill gates\", correct: false },\r\n      { text: \"linus torvalds\", correct: true },\r\n      { text: \"john cena\", correct: false },\r\n    ],\r\n    hints: [], //list of strings? or a string templates\r\n  },\r\n  {\r\n    type: \"input\",\r\n    question: \"<h1>What is 2<sup>4</sup>?</h1>\",\r\n    answer: 16,\r\n    hints: [], //list of strings? or a string templates\r\n  },\r\n]; */\r\nconst dispatch = createEventDispatcher();\r\nlet check_answer;\r\nlet is_valid = false;\r\nlet enable_next_button = false;\r\n$: status = \"\";\r\n/*  let problem_index =\r\n  progress.indexOf(Result.UNANSWERED) !== -1\r\n    ? progress.indexOf(Result.UNANSWERED)\r\n    : 0; */\r\n$: all_problems = data.data;\r\n$: finished_all_problems = false;\r\n$: current_problem = data.data[data.problem_index];\r\n$: reset_input_answer = false;\r\nlet reset_problems = false;\r\n//debug\r\nconsole.log(data.data);\r\n</script>\n\n<title>{data.title}</title>\n<div>\n  {#each all_problems as item, index}\n    <span\n      class={(index === data.problem_index ? 'current ' : '') + (item.result === Result.CORRECT ? 'dot correct' : item.result === Result.WRONG ? 'dot wrong' : 'dot')}\n    >{item.result}</span>\n  {/each}\n  {#if all_problems.length <= 0}\n    <h2>Could not fetch data :(</h2>\n  {:else if current_problem.type === 'input'}\n    <InputProblem\n      reset={reset_input_answer}\n      data={current_problem}\n      on:update-check={(event) => {\n        check_answer = event.detail;\n      }}\n      on:valid-input={(event) => {\n        is_valid = event.detail;\n      }}\n    />\n  {:else if current_problem.type === 'choice'}\n    <ChoiceProblem\n      data={current_problem}\n      on:update-check={(event) => {\n        check_answer = event.detail;\n      }}\n      on:valid-input={(event) => {\n        is_valid = event.detail;\n      }}\n    />\n  {:else if current_problem.type === 'select'}\n    <SelectProblem\n      data={current_problem}\n      on:update-check={(event) => {\n        check_answer = event.detail;\n      }}\n      on:valid-input={(event) => {\n        is_valid = event.detail;\n      }}\n    />\n  {/if}\n  <div class=\"right-buttons\">\n    {#if enable_next_button}\n      <button\n        class=\"button\"\n        on:click={() => {\n          if (data.problem_index < all_problems.length - 1) {\n            data.problem_index += 1;\n            enable_next_button = false;\n            check_answer = null;\n            is_valid = false;\n          } else {\n            finished_all_problems = true;\n            if (finished_all_problems) {\n              if (reset_problems) {\n                if (generate) {\n                  reset_problems = false;\n                  all_problems = all_problems.map(() => {\n                    return generate();\n                  });\n                  all_problems = all_problems;\n                  data.problem_index = 0;\n                  enable_next_button = false;\n                  check_answer = null;\n                  is_valid = false;\n                  finished_all_problems = false;\n                }\n              } else {\n                reset_problems = true;\n              }\n            }\n            /*let got_one_wrong = data.progress.findIndex((el) => {\n              return el.result === Result.WRONG;\n            }); */\n\n            //reset problems\n          }\n          dispatch('save');\n          reset_input_answer = true;\n        }}\n      >{finished_all_problems ? 'Reset' : 'Next'}</button>\n    {:else}\n      <button\n        class={is_valid ? 'button' : 'button disabled'}\n        on:click={() => {\n          reset_input_answer = false;\n          if (check_answer()) {\n            if (all_problems[data.problem_index].tries <= 0) {\n              all_problems[data.problem_index].result = Result.CORRECT;\n            }\n            enable_next_button = true;\n            correct_answer_sound.currentTime = 0;\n            correct_answer_sound.play();\n          } else {\n            wrong_answer_sound.play();\n            all_problems[data.problem_index].tries += 1;\n\n            all_problems[data.problem_index].result = Result.WRONG;\n          }\n          dispatch('save');\n        }}\n        disabled={!is_valid}\n      >Check</button>\n    {/if}\n  </div>\n  <!-- <details>test</details> -->\n</div>\n\n<style>\n  .button {\n    -webkit-box-pack: center !important;\n    -ms-flex-pack: center !important;\n    -webkit-box-align: center !important;\n    -ms-flex-align: center !important;\n    margin: 0px !important;\n    position: relative !important;\n    display: -webkit-inline-box !important;\n    display: -moz-inline-box !important;\n    display: -ms-inline-flexbox !important;\n    display: -webkit-inline-flex !important;\n    display: inline-flex !important;\n    -webkit-align-items: center !important;\n    align-items: center !important;\n    -webkit-justify-content: center !important;\n    justify-content: center !important;\n    height: 40px !important;\n    padding-top: 0px !important;\n    padding-bottom: 0px !important;\n    padding-left: 16px !important;\n    padding-right: 16px !important;\n    border: none !important;\n    border-radius: 4px !important;\n    cursor: pointer !important;\n    outline: none !important;\n    text-decoration: none !important;\n    -moz-box-sizing: border-box !important;\n    box-sizing: border-box !important;\n    -ms-touch-action: manipulation !important;\n    touch-action: manipulation !important;\n    -webkit-user-select: none !important;\n    -moz-user-select: none !important;\n    -ms-user-select: none !important;\n    user-select: none !important;\n    background: #1865f2 !important;\n    color: #ffffff !important;\n    min-width: 140px !important;\n    font-weight: bold;\n  }\n  .disabled {\n    background: rgba(33, 36, 44, 0.32) !important;\n  }\n  .right-buttons {\n    text-align: right;\n  }\n  :global(.dot) {\n    height: 1.5em;\n    width: 1.5em;\n    border-radius: 50%;\n    background-color: grey; /* default is grey? */\n    font-weight: bold;\n    color: white;\n    display: inline-block;\n    text-align: center;\n  }\n  :global(.current) {\n    border: 3px solid purple;\n  }\n  :global(.correct) {\n    background-color: green;\n  }\n  :global(.wrong) {\n    background-color: red;\n  }\n</style>\n",
    "<script type=\"ts\">export let data;\r\nimport { createEventDispatcher } from \"svelte\";\r\nconst dispatch = createEventDispatcher();\r\nlet selected = [];\r\n$: dispatch(\"update-check\", function check_answer() {\r\n    let correct_indexes = data.answer\r\n        .map((item, index) => {\r\n        if (item.correct) {\r\n            return index;\r\n        }\r\n    })\r\n        .filter((item) => {\r\n        if (item !== undefined) {\r\n            return true;\r\n        }\r\n    });\r\n    if (correct_indexes.length !== selected.length) {\r\n        return false;\r\n    }\r\n    else {\r\n        for (let item of correct_indexes) {\r\n            if (!selected.includes(item)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n});\r\n$: dispatch(\"valid-input\", selected.length > 0);\r\n</script>\n\n<style>\n  label {\n    border: 1px solid grey;\n    border-radius: 25px;\n    padding: 1em;\n    margin: 2px;\n  }\n</style>\n\n<div>\n  <div>\n    {@html data.question}\n  </div>\n  {#each data.answer as option, index}\n    <label>\n      <!-- selected_radio_index = index -->\n      <input\n        type=\"checkbox\"\n        bind:group={selected}\n        value={index}\n        on:click={function () {}} />\n      {option.text}\n    </label>\n  {/each}\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}